import { ocr, render } from '../ocr.ts';
import { assertEquals, assertThrows } from '@std/assert';

// Explicit spaces-as-"o" at EOL.
const ALPHA = `\
      ##  ###   ##  #### ####  ##  #  #  ###   ## #  # #     ##  ###  ###   ### #  # #    ####o
     #  # #  # #  # #    #    #  # #  #   #     # # #  #    #  # #  # #  # #    #  # #       #o
     #  # ###  #    ###  ###  #    ####   #     # ##   #    #  # #  # #  # #    #  #  # #   #oo
     #### #  # #    #    #    # ## #  #   #     # # #  #    #  # ###  ###   ##  #  #   #   #ooo
     #  # #  # #  # #    #    #  # #  #   #  #  # # #  #    #  # #    # #     # #  #   #  #oooo
     #  # ###   ##  #### #     ### #  #  ###  ##  #  # ####  ##  #    #  # ###   ##    #  ####o`
  .replaceAll('o', ' ');

const ALPHA10 = `\
.........##...#####...####..######.######..####..#....#....###.#....#.#......#....#.#####..#####..#....#.######.
........#..#..#....#.#....#.#......#......#....#.#....#.....#..#...#..#......##...#.#....#.#....#.#....#.....#..
.......#....#.#....#.#......#......#......#......#....#.....#..#..#...#......##...#.#....#.#....#..#..#......#..
.......#....#.#....#.#......#......#......#......#....#.....#..#.#....#......#.#..#.#....#.#....#..#..#.....#...
.......#....#.#####..#......#####..#####..#......######.....#..##.....#......#.#..#.#####..#####....##.....#....
.......######.#....#.#......#......#......#..###.#....#.....#..##.....#......#..#.#.#......#..#.....##....#.....
.......#....#.#....#.#......#......#......#....#.#....#.....#..#.#....#......#..#.#.#......#...#...#..#..#......
.......#....#.#....#.#......#......#......#....#.#....#.#...#..#..#...#......#...##.#......#...#...#..#..#......
.......#....#.#....#.#....#.#......#......#...##.#....#.#...#..#...#..#......#...##.#......#....#.#....#.#......
.......#....#.#####...####..######.#......###.#..#....#..###...#....#.######.#....#.#......#....#.#....#.######.`
  .replaceAll('.', ' ');

Deno.test('ocr', async (t) => {
  await t.step('render', () => {
    const s = render(' ABCEFGHIJKLOPRSUYZ');
    assertEquals(s, ALPHA);
    const s10 = render(' ABCEFGHJKLNPRXZ', { height: 10 });
    assertEquals(s10, ALPHA10);

    assertEquals(
      ocr(
        `\
@@@@..@@...@@.
@....@..@.@..@
@@@..@..@.@..@
@....@..@.@..@
@....@..@.@..@
@.....@@...@@.
`,
        { on: '@', off: '.' },
      ),
      'FOO',
    );
    assertThrows(() => render('\u{0}'));
  });

  await t.step('ocr', () => {
    assertEquals(ocr(ALPHA), ' ABCEFGHIJKLOPRSUYZ');
    assertEquals(ocr(ALPHA.split('\n')), ' ABCEFGHIJKLOPRSUYZ');
    assertEquals(ocr(ALPHA10, { height: 10 }), ' ABCEFGHJKLNPRXZ');

    assertEquals(
      ocr(
        `\
@@@@..@@...@@.
@....@..@.@..@
@@@..@..@.@..@
@....@..@.@..@
@....@..@.@..@
@.....@@...@@.
`,
        { on: '@', off: '.' },
      ),
      'FOO',
    );
    assertThrows(() => ocr('#\n#\n#\n#\n#\n#'));
  });
});
